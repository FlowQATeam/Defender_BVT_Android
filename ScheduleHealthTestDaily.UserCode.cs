///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SSPC_iOS
{
    public partial class ScheduleHealthTestDaily
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        
        public void timeExtracter()
        {
            	String[] word = TimeValue.Split(':',' ');
            	String[] array = {"0","0","0"};
            	int c=0;
            	foreach (String words in word) {
             		array[c] = words;
             		c++;
            	}
            	int number = Convert.ToInt32(array[1]);
            	int number1 = Convert.ToInt32(array[0]);
				number += 1;
				if(number>=60)
				{
					number1= number-60;
				}
				array[1] = number.ToString();
				array[0] = number1.ToString();
            	if (int.Parse(array[0])<10) {
            		TimeHrs= "0" + array[0];
            	}
            	else{
            		TimeHrs= array[0];
            	}
            	
            	if (int.Parse(array[1])<10) {
            		TimeMins= "0" + array[1];
            	}
            	else{
            		TimeMins= array[1];
            	}
            	
            	TimeAmPm = array[2].ToUpper();
        }

        public void Swipe_gesture_AMPM(RepoItemInfo iospickerInfo)
        {
        	String check = "AM";
        	bool areEqual = String.Equals(TimeAmPm, check, StringComparison.OrdinalIgnoreCase);
        	if(areEqual == true){
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'iospickerInfo'.", iospickerInfo);
            iospickerInfo.FindAdapter<IosPicker>().Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
        	}
        	else{
        		Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Down (90°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'iospickerInfo'.", iospickerInfo);
            iospickerInfo.FindAdapter<IosPicker>().Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Down (90°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
        	}
        }

        public void Swipe_gesture_Minutes(RepoItemInfo iospickerInfo)
        {
            String check = "00";
        	bool areEqual = String.Equals(TimeAmPm, check, StringComparison.OrdinalIgnoreCase);
        	if(areEqual == true){
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'iospickerInfo'.", iospickerInfo);
            iospickerInfo.FindAdapter<IosPicker>().Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
        	}
        	else{
        		Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Down (90°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'iospickerInfo'.", iospickerInfo);
            iospickerInfo.FindAdapter<IosPicker>().Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Down (90°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
        	}
        }

        public void Swipe_gesture_Hours(RepoItemInfo iospickerInfo)
        {
           String check = "01";
        	bool areEqual = String.Equals(TimeAmPm, check, StringComparison.OrdinalIgnoreCase);
        	if(areEqual == false){
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'iospickerInfo'.", iospickerInfo);
            iospickerInfo.FindAdapter<IosPicker>().Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
        	}
        	else{
        		Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Down (90°)' starting from 'Center' with distance '.1' with swipe duration'500ms' and step count '0' on item 'iospickerInfo'.", iospickerInfo);
            iospickerInfo.FindAdapter<IosPicker>().Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Down (90°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".1"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
        	}
        }
    }
}
